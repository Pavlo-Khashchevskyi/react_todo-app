{"version":3,"sources":["api/api.ts","components/TodoFilter.tsx","StateContext.tsx","components/TodoItem.tsx","components/TodoList.tsx","App.tsx","index.tsx"],"names":["BASE_URL","userId","removeTodoToServer","id","axios","delete","editTodo","todoId","payload","patch","TodoFilter","handleSortBy","sortBy","className","type","classNames","selected","onClick","React","memo","reducer","state","initialState","action","todos","map","todo","allTodosCompleted","completed","user","filter","DispatchContext","createContext","StateContext","StateProvider","children","useReducer","dispatch","Provider","value","TodoItem","handleRemoveTodo","updateTodo","useState","title","setTitle","isEditing","setIsEditing","changeTodo","editing","onDoubleClick","checked","onChange","event","target","onKeyDown","key","nativeEvent","onBlur","TodoList","useContext","visibleTodos","TransitionGroup","CSSTransition","timeout","App","countCompetedTodos","setCountCompetedTodos","countActiveTodos","setÐ¡ountActiveTodos","textInput","setTextInput","setSortBy","setUser","a","get","response","status","data","Error","handleTodos","handleAddTodo","post","useEffect","completedTodo","length","activeTodo","handleCountTodo","in","onSubmit","preventDefault","trim","placeholder","handleTextInput","forEach","handleToggleAll","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"6SAEaA,EAAW,oCAClBC,EAAS,MAQFC,EAAqB,SAACC,GAAD,OAAgBC,IAAMC,OAAN,UAAgBL,EAAhB,kBAAkCG,KAEvEG,EAAW,SAACC,EAAgBC,GAAjB,OAAkCJ,IAAMK,MAAN,UAAeT,EAAf,kBAAiCO,GAAUC,I,wBCL/FE,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAjB,OAClC,qBAAIC,UAAU,UAAd,UACE,6BACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,CAAEC,SAAqB,QAAXJ,IAClCK,QAAS,WACPN,EAAa,QAJjB,mBAWF,6BACE,wBACEG,KAAK,SACLD,UAAWE,IAAW,CAAEC,SAAqB,WAAXJ,IAClCK,QAAS,WACPN,EAAa,WAJjB,sBAWF,6BACE,wBACEG,KAAK,SACLD,UAAWE,IAAW,CAAEC,SAAqB,cAAXJ,IAClCK,QAAS,WACPN,EAAa,cAJjB,6BAaSO,MAAMC,KAAKT,G,uBCxCpBU,EAAU,WAAgD,IAA/CC,EAA8C,uDAA9BC,EAAcC,EAAgB,uCAC7D,OAAQA,EAAOT,MACb,IAAK,YACH,OAAO,2BACFO,GADL,IAEEG,MAAOH,EAAMG,MAAMC,KAAI,SAACC,GACtB,OAAIH,EAAOI,kBACF,2BACFD,GADL,IAEEE,WAAW,IAIR,2BACFF,GADL,IAEEE,WAAW,SAInB,IAAK,UACH,OAAO,2BACFP,GADL,IAEEQ,KAAMN,EAAOM,OAEjB,IAAK,eACH,OAAO,2BACFR,GADL,IAEEG,MAAOD,EAAOC,QAElB,IAAK,UACH,OAAO,2BACFH,GADL,IAEEG,MAAM,GAAD,mBAAMH,EAAMG,OAAZ,CAAmBD,EAAOG,SAEnC,IAAK,aACH,OAAO,2BACFL,GADL,IAEEG,MAAOH,EAAMG,MAAMM,QAAO,SAACJ,GAAD,OAAiBA,EAAKvB,KAAOoB,EAAOpB,QAElE,IAAK,aACH,OAAO,2BACFkB,GADL,IAEEG,MAAOH,EAAMG,MAAMC,KAAI,SAACC,GACtB,OAAIA,EAAKvB,KAAOoB,EAAOpB,GACdoB,EAAOG,KAGTA,OAGb,IAAK,sBACH,OAAO,2BACFL,GADL,IAEEG,MAAOH,EAAMG,MAAMM,QAAO,SAACJ,GAAD,OAAoC,IAAnBA,EAAKE,eAEpD,QACE,OAAO,eACFP,KAKLC,EAAe,CACnBE,MAAO,GACPK,KAAM,MAGKE,EAAkBb,IAAMc,eAAmB,eAC3CC,EAAef,IAAMc,cAAsBV,GAM3CY,EAAgC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC9C,EAA0BC,qBAAWhB,EAASE,GAA9C,mBAAOD,EAAP,KAAcgB,EAAd,KAEA,OACE,cAACN,EAAgBO,SAAjB,CAA0BC,MAAOF,EAAjC,SACE,cAACJ,EAAaK,SAAd,CAAuBC,MAAOlB,EAA9B,SACGc,OCHMK,EA3EmB,SAAC,GAI5B,IAHLd,EAGI,EAHJA,KACAe,EAEI,EAFJA,iBACAC,EACI,EADJA,WAEA,EAA0BC,mBAASjB,EAAKkB,OAAxC,mBAAOA,EAAP,KAAcC,EAAd,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEMC,EAAa,WACH,KAAVJ,EACFH,EAAiBf,EAAKvB,IAEtBuC,EAAWhB,EAAKvB,GAAI,CAAEyC,UAGxBG,GAAa,IAOf,OACE,qBACElC,UAAWE,IACT,CAAEa,UAAWF,EAAKE,WAClB,CAAEqB,QAASH,IAEbI,cAAe,kBAAMH,GAAa,IALpC,UAQE,sBAAKlC,UAAU,OAAf,UACE,uBACEC,KAAK,WACLD,UAAU,SACVsC,QAASzB,EAAKE,UACdwB,SAAU,WACRV,EAAWhB,EAAKvB,GAAI,CAAEyB,WAAYF,EAAKE,eAI3C,gCACGF,EAAKkB,QAGR,wBACE9B,KAAK,SACLD,UAAU,UACVI,QAAS,kBAAMwB,EAAiBf,EAAKvB,UAIzC,uBACEW,KAAK,OACLD,UAAU,OACV0B,MAAOK,EACPQ,SAtCc,SAACC,GACnBR,EAASQ,EAAMC,OAAOf,QAsClBgB,UAAW,SAACF,GACV,IAAQG,EAAQH,EAAMI,YAAdD,IAEI,UAARA,EACFR,IACiB,WAARQ,IACTX,EAASnB,EAAKkB,OACdG,GAAa,KAGjBW,OAAQ,WACNV,WCpBKW,EA9CmB,SAAC,GAI5B,IAHLlB,EAGI,EAHJA,iBACAC,EAEI,EAFJA,WACA9B,EACI,EADJA,OAEQY,EAAUoC,qBAAW3B,GAArBT,MAEJqC,EAAY,YAAOrC,GAEvB,OAAQZ,GACN,IAAK,YACHiD,EAAeA,EAAa/B,QAC1B,SAACJ,GAAD,OAAoC,IAAnBA,EAAKE,aAExB,MACF,IAAK,SACHiC,EAAeA,EAAa/B,QAC1B,SAACJ,GAAD,OAAoC,IAAnBA,EAAKE,aAO5B,OACE,oBAAIf,UAAU,YAAd,SACE,cAACiD,EAAA,EAAD,UACGD,EAAapC,KAAI,SAACC,GAAD,OAChB,cAACqC,EAAA,EAAD,CAEEC,QAAS,IACTjD,WAAW,OAHb,SAKE,cAAC,EAAD,CACEW,KAAMA,EACNe,iBAAkBA,EAClBC,WAAYA,KAPThB,EAAKvB,YCuLP8D,EAlNM,WACnB,IAAM5B,EAAWuB,qBAAW7B,GAC5B,EAAwB6B,qBAAW3B,GAA3BT,EAAR,EAAQA,MAAOK,EAAf,EAAeA,KAEf,EAAoDc,mBAAS,GAA7D,mBAAOuB,EAAP,KAA2BC,EAA3B,KACA,EAAgDxB,mBAAS,GAAzD,mBAAOyB,EAAP,KAAyBC,EAAzB,KACA,EAAkC1B,mBAAS,IAA3C,mBAAO2B,EAAP,KAAkBC,EAAlB,KACA,EAA4B5B,mBAAS,OAArC,mBAAO/B,EAAP,KAAe4D,EAAf,KAkBMC,EAAO,uCAAG,4BAAAC,EAAA,+ELxBWtE,IAAMuE,IAAN,UAAa3E,EAAb,kBAA+BC,IKwB1C,OAIY,OAFlB2E,EAFM,QAICC,QACXxC,EAAS,CAAEvB,KAAM,UAAWe,KAAM+C,EAASE,OALjC,sDAQN,IAAIC,MAAM,SARJ,yDAAH,qDAYPC,EAAW,uCAAG,4BAAAN,EAAA,+ELlCYtE,IAAMuE,IAAN,UAAa3E,EAAb,yBAAsCC,IKkClD,OAIQ,OAFlB2E,EAFU,QAIHC,QACXxC,EAAS,CAAEvB,KAAM,eAAgBU,MAAOoD,EAASE,OALnC,sDAQV,IAAIC,MAAM,SARA,yDAAH,qDAYXE,EAAa,uCAAG,4BAAAP,EAAA,+EL1DQ9B,EK4Da0B,EL5DKlE,IAAM8E,KAAN,UAAclF,EAAd,UAAgC,CAChF4C,QACA3C,SACA2B,WAAW,IKuDW,OAIM,OAFlBgD,EAFY,QAILC,QACXxC,EAAS,CAAEvB,KAAM,UAAWY,KAAMkD,EAASE,OAL3B,sDAQZ,IAAIC,MAAM,SARE,kCL1DO,IAACnC,IK0DR,oBAAH,qDAYbH,EAAgB,uCAAG,WAAMtC,GAAN,SAAAuE,EAAA,+EAEExE,EAAmBC,GAFrB,OAIG,MAJH,OAIR0E,QACXxC,EAAS,CAAEvB,KAAM,aAAcX,OALZ,sDAQf,IAAI4E,MAAM,SARK,yDAAH,sDAYhBrC,EAAU,uCAAG,WAAMvC,EAAYK,GAAlB,eAAAkE,EAAA,+EAEQpE,EAASH,EAAIK,GAFrB,OAIS,OAFlBoE,EAFS,QAIFC,QACXxC,EAAS,CAAEvB,KAAM,aAAcX,KAAIuB,KAAMkD,EAASE,OALrC,sDAQT,IAAIC,MAAM,SARD,yDAAH,wDAyDhB,OATAI,qBAAU,WACRV,IACAO,MACC,IAEHG,qBAAU,YArHc,WACtB,IAAMC,EAAgB5D,EAAMM,QAAO,SAAAJ,GAAI,OAAuB,IAAnBA,EAAKE,aAAoByD,OAC9DC,EAAa9D,EAAMM,QAAO,SAAAJ,GAAI,OAAuB,IAAnBA,EAAKE,aAAqByD,OAElElB,EAAsBiB,GACtBf,EAAoBiB,GAiHpBC,KACC,CAAC/D,IAGF,0BAASX,UAAU,UAAnB,UACE,yBAAQA,UAAU,SAAlB,UACE,cAACkD,EAAA,EAAD,CACEyB,KAAM3D,EACNmC,QAAS,IACTjD,WAAW,eAHb,SAKE,yCAEF,sBAAM0E,SAAU,SAACpC,GACfA,EAAMqC,iBACDpB,EAAUqB,SAIfV,IACAV,EAAa,MAPf,SAUE,uBACEhC,MAAO+B,EACPxD,KAAK,OACLD,UAAU,WACV+E,YAAY,yBACZxC,SAAU,SAACC,IAtIG,SAACA,GACvBkB,EAAalB,EAAMC,OAAOf,OAsIhBsD,CAAgBxC,WAMxB,0BAASxC,UAAU,OAAnB,UACE,uBACEC,KAAK,WACLX,GAAG,aACHU,UAAU,aACVsC,QAA0D,IAAjD3B,EAAMM,QAAO,SAAAJ,GAAI,OAAKA,EAAKE,aAAWyD,OAC/CjC,SAAU,YAnFM,WACtB,IAAMzB,EAEO,IAFaH,EAAMM,QAC9B,SAAAJ,GAAI,OAAKA,EAAKE,aACdyD,OAEE1D,EACFH,EAAMsE,SAAQ,SAACpE,GACbpB,EAASoB,EAAKvB,GAAI,CAAEyB,WAAW,OAGjCJ,EAAMsE,SAAQ,SAACpE,IACU,IAAnBA,EAAKE,WACPtB,EAASoB,EAAKvB,GAAI,CAAEyB,WAAW,OAKrCS,EAAS,CAAEvB,KAAM,YAAaa,sBAmEtBoE,MAGJ,uBAAOC,QAAQ,aAAf,kCAEA,cAAC,EAAD,CACEvD,iBAAkBA,EAClBC,WAAYA,EACZ9B,OAAQA,SAITY,EAAM6D,QACP,yBAAQxE,UAAU,SAAlB,YACKuD,GACD,sBAAMvD,UAAU,aAAhB,SACoB,IAAjBW,EAAM6D,OACH,cADH,UAEMjB,EAFN,iBAML,cAAC,EAAD,CAAYzD,aA9KC,SAACG,GACpB0D,EAAU1D,IA6KoCF,OAAQA,MAE7CsD,GACH,wBACEpD,KAAK,SACLD,UAAU,kBACVI,QAAS,WA3FjBO,EAAMsE,QAAN,uCAAc,WAAMpE,GAAN,SAAAgD,EAAA,mEAEa,IAAnBhD,EAAKE,UAFC,gCAGe1B,EAAmBwB,EAAKvB,IAHvC,OAKgB,MALhB,OAKK0E,QACXxC,EAAS,CAAEvB,KAAM,wBANX,6DAUJ,IAAIiE,MAAM,SAVN,yDAAd,wDAwFM,oCCtMVkB,IAASC,OACP,cAAC,EAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.607203c3.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const BASE_URL = 'https://mate.academy/students-api';\nconst userId = 88888;\n\nexport const addTodoToServer = (title: string) => axios.post(`${BASE_URL}/todos`, {\n  title,\n  userId,\n  completed: false,\n});\n\nexport const removeTodoToServer = (id: number) => axios.delete(`${BASE_URL}/todos/${id}`);\n\nexport const editTodo = (todoId: number, payload: any) => axios.patch(`${BASE_URL}/todos/${todoId}`, payload);\n\nexport const getUser = () => axios.get(`${BASE_URL}/users/${userId}`);\n\nexport const getTodosUser = () => axios.get(`${BASE_URL}/todos?userId=${userId}`);\n","import classNames from 'classnames';\nimport React from 'react';\n\ntype Props = {\n  sortBy: string;\n  handleSortBy: (type: string) => void;\n}\n\nconst TodoFilter: React.FC<Props> = ({ handleSortBy, sortBy }) => (\n  <ul className=\"filters\">\n    <li>\n      <button\n        type=\"button\"\n        className={classNames({ selected: sortBy === 'all' })}\n        onClick={() => {\n          handleSortBy('all');\n        }}\n      >\n        All\n      </button>\n    </li>\n\n    <li>\n      <button\n        type=\"button\"\n        className={classNames({ selected: sortBy === 'active' })}\n        onClick={() => {\n          handleSortBy('active');\n        }}\n      >\n        Active\n      </button>\n    </li>\n\n    <li>\n      <button\n        type=\"button\"\n        className={classNames({ selected: sortBy === 'completed' })}\n        onClick={() => {\n          handleSortBy('completed');\n        }}\n      >\n        Completed\n      </button>\n    </li>\n  </ul>\n);\n\nexport default React.memo(TodoFilter);\n","import React, { useReducer } from 'react';\nimport ITodo from './models/Todo';\n\ninterface IState {\n  todos: ITodo[];\n  user: null;\n}\n\nconst reducer = (state: IState = initialState, action: any) => {\n  switch (action.type) {\n    case 'toggleAll':\n      return {\n        ...state,\n        todos: state.todos.map((todo: ITodo) => {\n          if (action.allTodosCompleted) {\n            return {\n              ...todo,\n              completed: false,\n            };\n          }\n\n          return {\n            ...todo,\n            completed: true,\n          };\n        }),\n      };\n    case 'getUser':\n      return {\n        ...state,\n        user: action.user,\n      };\n    case 'getUserTodos':\n      return {\n        ...state,\n        todos: action.todos,\n      };\n    case 'addTodo':\n      return {\n        ...state,\n        todos: [...state.todos, action.todo],\n      };\n    case 'deleteTodo':\n      return {\n        ...state,\n        todos: state.todos.filter((todo: ITodo) => todo.id !== action.id),\n      };\n    case 'updateTodo':\n      return {\n        ...state,\n        todos: state.todos.map((todo: ITodo) => {\n          if (todo.id === action.id) {\n            return action.todo;\n          }\n\n          return todo;\n        }),\n      };\n    case 'clearCompletedTodos':\n      return {\n        ...state,\n        todos: state.todos.filter((todo: ITodo) => todo.completed === false),\n      };\n    default:\n      return {\n        ...state,\n      };\n  }\n};\n\nconst initialState = {\n  todos: [],\n  user: null,\n};\n\nexport const DispatchContext = React.createContext<any>(() => {});\nexport const StateContext = React.createContext<IState>(initialState);\n\ntype Props = {\n  children: React.ReactNode,\n}\n\nexport const StateProvider:React.FC<Props> = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <DispatchContext.Provider value={dispatch}>\n      <StateContext.Provider value={state}>\n        {children}\n      </StateContext.Provider>\n    </DispatchContext.Provider>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport ITodo from '../models/Todo';\n\ntype Props = {\n  todo: ITodo;\n  handleRemoveTodo: (id: number) => void;\n  updateTodo: (id: number, payload: {}) => void;\n}\n\nconst TodoItem: React.FC<Props> = ({\n  todo,\n  handleRemoveTodo,\n  updateTodo,\n}) => {\n  const [title, setTitle] = useState(todo.title);\n  const [isEditing, setIsEditing] = useState(false);\n\n  const changeTodo = () => {\n    if (title === '') {\n      handleRemoveTodo(todo.id);\n    } else {\n      updateTodo(todo.id, { title });\n    }\n\n    setIsEditing(false);\n  };\n\n  const handleTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n  };\n\n  return (\n    <li\n      className={classNames(\n        { completed: todo.completed },\n        { editing: isEditing },\n      )}\n      onDoubleClick={() => setIsEditing(true)}\n\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={todo.completed}\n          onChange={() => {\n            updateTodo(todo.id, { completed: !todo.completed });\n          }}\n        />\n\n        <label>\n          {todo.title}\n        </label>\n\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => handleRemoveTodo(todo.id)}\n        />\n      </div>\n\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={title}\n        onChange={handleTitle}\n        onKeyDown={(event) => {\n          const { key } = event.nativeEvent;\n\n          if (key === 'Enter') {\n            changeTodo();\n          } else if (key === 'Escape') {\n            setTitle(todo.title);\n            setIsEditing(false);\n          }\n        }}\n        onBlur={() => {\n          changeTodo();\n        }}\n      />\n    </li>\n  );\n};\n\nexport default TodoItem;\n","import React, { useContext } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport ITodo from '../models/Todo';\nimport { StateContext } from '../StateContext';\nimport TodoItem from './TodoItem';\n\ntype Props = {\n  handleRemoveTodo: (id: number) => void;\n  updateTodo: (id: number, payload: {}) => void;\n  sortBy: string;\n}\n\nconst TodoList: React.FC<Props> = ({\n  handleRemoveTodo,\n  updateTodo,\n  sortBy,\n}) => {\n  const { todos } = useContext(StateContext);\n\n  let visibleTodos = [...todos];\n\n  switch (sortBy) {\n    case 'completed':\n      visibleTodos = visibleTodos.filter(\n        (todo: ITodo) => todo.completed === true,\n      );\n      break;\n    case 'active':\n      visibleTodos = visibleTodos.filter(\n        (todo: ITodo) => todo.completed === false,\n      );\n      break;\n    default:\n      break;\n  }\n\n  return (\n    <ul className=\"todo-list\">\n      <TransitionGroup>\n        {visibleTodos.map((todo: ITodo) => (\n          <CSSTransition\n            key={todo.id}\n            timeout={500}\n            classNames=\"item\"\n          >\n            <TodoItem\n              todo={todo}\n              handleRemoveTodo={handleRemoveTodo}\n              updateTodo={updateTodo}\n            />\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n    </ul>\n\n  );\n};\n\nexport default TodoList;\n","import React, { ChangeEvent, useContext, useEffect, useState } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport {\n  getUser,\n  addTodoToServer,\n  removeTodoToServer,\n  getTodosUser,\n  editTodo,\n} from './api/api';\nimport TodoFilter from './components/TodoFilter';\nimport TodoList from './components/TodoList';\n\nimport { StateContext, DispatchContext } from './StateContext';\n\nconst App:React.FC = () => {\n  const dispatch = useContext(DispatchContext);\n  const { todos, user } = useContext(StateContext);\n\n  const [countCompetedTodos, setCountCompetedTodos] = useState(0);\n  const [countActiveTodos, setÐ¡ountActiveTodos] = useState(0);\n  const [textInput, setTextInput] = useState('');\n  const [sortBy, setSortBy] = useState('all');\n\n  const handleCountTodo = () => {\n    const completedTodo = todos.filter(todo => todo.completed === true).length;\n    const activeTodo = todos.filter(todo => todo.completed === false).length;\n\n    setCountCompetedTodos(completedTodo);\n    setÐ¡ountActiveTodos(activeTodo);\n  };\n\n  const handleSortBy = (type: string) => {\n    setSortBy(type);\n  };\n\n  const handleTextInput = (event: ChangeEvent<HTMLInputElement>) => {\n    setTextInput(event.target.value);\n  };\n\n  const setUser = async() => {\n    try {\n      const response = await getUser();\n\n      if (response.status === 200) {\n        dispatch({ type: 'getUser', user: response.data });\n      }\n    } catch {\n      throw new Error('error');\n    }\n  };\n\n  const handleTodos = async() => {\n    try {\n      const response = await getTodosUser();\n\n      if (response.status === 200) {\n        dispatch({ type: 'getUserTodos', todos: response.data });\n      }\n    } catch {\n      throw new Error('error');\n    }\n  };\n\n  const handleAddTodo = async() => {\n    try {\n      const response = await addTodoToServer(textInput);\n\n      if (response.status === 201) {\n        dispatch({ type: 'addTodo', todo: response.data });\n      }\n    } catch {\n      throw new Error('error');\n    }\n  };\n\n  const handleRemoveTodo = async(id: number) => {\n    try {\n      const response = await removeTodoToServer(id);\n\n      if (response.status === 200) {\n        dispatch({ type: 'deleteTodo', id });\n      }\n    } catch {\n      throw new Error('error');\n    }\n  };\n\n  const updateTodo = async(id: number, payload: any) => {\n    try {\n      const response = await editTodo(id, payload);\n\n      if (response.status === 200) {\n        dispatch({ type: 'updateTodo', id, todo: response.data });\n      }\n    } catch {\n      throw new Error('error');\n    }\n  };\n\n  const handleToggleAll = () => {\n    const allTodosCompleted = todos.filter(\n      todo => !todo.completed,\n    ).length === 0;\n\n    if (allTodosCompleted) {\n      todos.forEach((todo) => {\n        editTodo(todo.id, { completed: false });\n      });\n    } else {\n      todos.forEach((todo) => {\n        if (todo.completed === false) {\n          editTodo(todo.id, { completed: true });\n        }\n      });\n    }\n\n    dispatch({ type: 'toggleAll', allTodosCompleted });\n  };\n\n  const handleClearCompleted = () => {\n    todos.forEach(async(todo) => {\n      try {\n        if (todo.completed === true) {\n          const response = await removeTodoToServer(todo.id);\n\n          if (response.status === 200) {\n            dispatch({ type: 'clearCompletedTodos' });\n          }\n        }\n      } catch {\n        throw new Error('error');\n      }\n    });\n  };\n\n  useEffect(() => {\n    setUser();\n    handleTodos();\n  }, []);\n\n  useEffect(() => {\n    handleCountTodo();\n  }, [todos]);\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <CSSTransition\n          in={!!user}\n          timeout={1000}\n          classNames=\"header-title\"\n        >\n          <h1>todos</h1>\n        </CSSTransition>\n        <form onSubmit={(event) => {\n          event.preventDefault();\n          if (!textInput.trim()) {\n            return;\n          }\n\n          handleAddTodo();\n          setTextInput('');\n        }}\n        >\n          <input\n            value={textInput}\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            onChange={(event) => {\n              handleTextInput(event);\n            }}\n          />\n        </form>\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          checked={todos.filter(todo => !todo.completed).length === 0}\n          onChange={() => {\n            handleToggleAll();\n          }}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        <TodoList\n          handleRemoveTodo={handleRemoveTodo}\n          updateTodo={updateTodo}\n          sortBy={sortBy}\n        />\n      </section>\n\n      {!!todos.length && (\n        <footer className=\"footer\">\n          {!!countActiveTodos && (\n            <span className=\"todo-count\">\n              {todos.length === 1\n                ? '1 item left'\n                : `${countActiveTodos} items left`}\n            </span>\n          )}\n\n          <TodoFilter handleSortBy={handleSortBy} sortBy={sortBy} />\n\n          {!!countCompetedTodos && (\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={() => {\n              handleClearCompleted();\n            }}\n          >\n            Clear completed\n          </button>\n          )}\n        </footer>\n      )}\n    </section>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\nimport { StateProvider } from './StateContext';\n\nReactDOM.render(\n  <StateProvider>\n    <App />\n  </StateProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}